// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  role         UserRole @default(READER)
  name         String?
  bio          String?
  phone        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  venue        Venue?
  articles     Article[]
  playlists    Playlist[]
  advertisements Advertisement[]

  @@map("users")
}

model Venue {
  id          String   @id @default(cuid())
  userId      String   @unique
  name        String
  address     String
  phone       String?
  website     String?
  description String?
  capacity    Int?
  amenities   String[]
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events      Event[]

  @@map("venues")
}

model Event {
  id          String      @id @default(cuid())
  venueId     String
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  price       Decimal?
  category    EventCategory
  status      EventStatus @default(DRAFT)
  createdAt   DateTime    @default(now())

  // Relations
  venue       Venue       @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("events")
}

model MagazineIssue {
  id          String   @id @default(cuid())
  title       String
  monthYear   String
  coverImage  String?
  publishedAt DateTime?
  status      IssueStatus @default(DRAFT)
  createdAt   DateTime @default(now())

  // Relations
  articles    Article[]

  @@map("magazine_issues")
}

model Article {
  id            String   @id @default(cuid())
  issueId       String
  title         String
  content       String
  authorId      String
  featuredImage String?
  publishedAt   DateTime?
  status        ArticleStatus @default(DRAFT)
  createdAt     DateTime @default(now())

  // Relations
  issue         MagazineIssue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("articles")
}

model Playlist {
  id          String   @id @default(cuid())
  curatorId   String
  title       String
  description String?
  tracks      Json
  createdAt   DateTime @default(now())

  // Relations
  curator     User     @relation(fields: [curatorId], references: [id], onDelete: Cascade)

  @@map("playlists")
}

model Advertisement {
  id            String   @id @default(cuid())
  advertiserId  String
  issueId       String?
  adType        AdType
  content       String
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime @default(now())

  // Relations
  advertiser    User     @relation(fields: [advertiserId], references: [id], onDelete: Cascade)

  @@map("advertisements")
}

enum UserRole {
  ADMIN
  VENUE
  ARTIST
  READER
}

enum EventCategory {
  LIVE_MUSIC
  STANDUP_COMEDY
  CLASSICAL_MUSIC
  THEATRE
  ART_GALLERY
  LITERATURE
  RESTAURANT_EVENT
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
}

enum IssueStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AdType {
  BANNER
  SIDEBAR
  FEATURED
  CLASSIFIED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
